{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import datetime\n",
    "from collections import Counter\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.metrics import confusion_matrix\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "users = pd.read_csv('takehome_users.csv',encoding ='latin-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>object_id</th>\n",
       "      <th>creation_time</th>\n",
       "      <th>name</th>\n",
       "      <th>email</th>\n",
       "      <th>creation_source</th>\n",
       "      <th>last_session_creation_time</th>\n",
       "      <th>opted_in_to_mailing_list</th>\n",
       "      <th>enabled_for_marketing_drip</th>\n",
       "      <th>org_id</th>\n",
       "      <th>invited_by_user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2014-04-22 03:53:30</td>\n",
       "      <td>Clausen August</td>\n",
       "      <td>AugustCClausen@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>1.398139e+09</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>10803.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2013-11-15 03:45:04</td>\n",
       "      <td>Poole Matthew</td>\n",
       "      <td>MatthewPoole@gustr.com</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>1.396238e+09</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>316.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2013-03-19 23:14:52</td>\n",
       "      <td>Bottrill Mitchell</td>\n",
       "      <td>MitchellBottrill@gustr.com</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>1.363735e+09</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>1525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2013-05-21 08:09:28</td>\n",
       "      <td>Clausen Nicklas</td>\n",
       "      <td>NicklasSClausen@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>1.369210e+09</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5151.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2013-01-17 10:14:20</td>\n",
       "      <td>Raw Grace</td>\n",
       "      <td>GraceRaw@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>1.358850e+09</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>193</td>\n",
       "      <td>5240.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   object_id        creation_time               name  \\\n",
       "0          1  2014-04-22 03:53:30     Clausen August   \n",
       "1          2  2013-11-15 03:45:04      Poole Matthew   \n",
       "2          3  2013-03-19 23:14:52  Bottrill Mitchell   \n",
       "3          4  2013-05-21 08:09:28    Clausen Nicklas   \n",
       "4          5  2013-01-17 10:14:20          Raw Grace   \n",
       "\n",
       "                        email creation_source  last_session_creation_time  \\\n",
       "0    AugustCClausen@yahoo.com    GUEST_INVITE                1.398139e+09   \n",
       "1      MatthewPoole@gustr.com      ORG_INVITE                1.396238e+09   \n",
       "2  MitchellBottrill@gustr.com      ORG_INVITE                1.363735e+09   \n",
       "3   NicklasSClausen@yahoo.com    GUEST_INVITE                1.369210e+09   \n",
       "4          GraceRaw@yahoo.com    GUEST_INVITE                1.358850e+09   \n",
       "\n",
       "   opted_in_to_mailing_list  enabled_for_marketing_drip  org_id  \\\n",
       "0                         1                           0      11   \n",
       "1                         0                           0       1   \n",
       "2                         0                           0      94   \n",
       "3                         0                           0       1   \n",
       "4                         0                           0     193   \n",
       "\n",
       "   invited_by_user_id  \n",
       "0             10803.0  \n",
       "1               316.0  \n",
       "2              1525.0  \n",
       "3              5151.0  \n",
       "4              5240.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>object_id</th>\n",
       "      <th>creation_time</th>\n",
       "      <th>name</th>\n",
       "      <th>email</th>\n",
       "      <th>creation_source</th>\n",
       "      <th>last_session_creation_time</th>\n",
       "      <th>opted_in_to_mailing_list</th>\n",
       "      <th>enabled_for_marketing_drip</th>\n",
       "      <th>org_id</th>\n",
       "      <th>invited_by_user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2014-04-22 03:53:30</td>\n",
       "      <td>Clausen August</td>\n",
       "      <td>AugustCClausen@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2014-04-22 03:53:30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>10803.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2013-11-15 03:45:04</td>\n",
       "      <td>Poole Matthew</td>\n",
       "      <td>MatthewPoole@gustr.com</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>2014-03-31 03:45:04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>316.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2013-03-19 23:14:52</td>\n",
       "      <td>Bottrill Mitchell</td>\n",
       "      <td>MitchellBottrill@gustr.com</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>2013-03-19 23:14:52</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>1525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2013-05-21 08:09:28</td>\n",
       "      <td>Clausen Nicklas</td>\n",
       "      <td>NicklasSClausen@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2013-05-22 08:09:28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5151.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2013-01-17 10:14:20</td>\n",
       "      <td>Raw Grace</td>\n",
       "      <td>GraceRaw@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2013-01-22 10:14:20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>193</td>\n",
       "      <td>5240.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   object_id       creation_time               name  \\\n",
       "0          1 2014-04-22 03:53:30     Clausen August   \n",
       "1          2 2013-11-15 03:45:04      Poole Matthew   \n",
       "2          3 2013-03-19 23:14:52  Bottrill Mitchell   \n",
       "3          4 2013-05-21 08:09:28    Clausen Nicklas   \n",
       "4          5 2013-01-17 10:14:20          Raw Grace   \n",
       "\n",
       "                        email creation_source last_session_creation_time  \\\n",
       "0    AugustCClausen@yahoo.com    GUEST_INVITE        2014-04-22 03:53:30   \n",
       "1      MatthewPoole@gustr.com      ORG_INVITE        2014-03-31 03:45:04   \n",
       "2  MitchellBottrill@gustr.com      ORG_INVITE        2013-03-19 23:14:52   \n",
       "3   NicklasSClausen@yahoo.com    GUEST_INVITE        2013-05-22 08:09:28   \n",
       "4          GraceRaw@yahoo.com    GUEST_INVITE        2013-01-22 10:14:20   \n",
       "\n",
       "   opted_in_to_mailing_list  enabled_for_marketing_drip  org_id  \\\n",
       "0                         1                           0      11   \n",
       "1                         0                           0       1   \n",
       "2                         0                           0      94   \n",
       "3                         0                           0       1   \n",
       "4                         0                           0     193   \n",
       "\n",
       "   invited_by_user_id  \n",
       "0             10803.0  \n",
       "1               316.0  \n",
       "2              1525.0  \n",
       "3              5151.0  \n",
       "4              5240.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users['creation_time'] = pd.to_datetime(users['creation_time'])\n",
    "users['last_session_creation_time'] = pd.to_datetime(users['last_session_creation_time'], unit='s')\n",
    "users.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "object_id                        0\n",
       "creation_time                    0\n",
       "name                             0\n",
       "email                            0\n",
       "creation_source                  0\n",
       "last_session_creation_time    3177\n",
       "opted_in_to_mailing_list         0\n",
       "enabled_for_marketing_drip       0\n",
       "org_id                           0\n",
       "invited_by_user_id            5583\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#getting info about null values\n",
    "users.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#handling of null values\n",
    "users['invited_by_user_id'].fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#impute last_session_creation_time with creation_time considering that as a last session creation time\n",
    "users['last_session_creation_time'].fillna(users['creation_time'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "object_id                     0\n",
       "creation_time                 0\n",
       "name                          0\n",
       "email                         0\n",
       "creation_source               0\n",
       "last_session_creation_time    0\n",
       "opted_in_to_mailing_list      0\n",
       "enabled_for_marketing_drip    0\n",
       "org_id                        0\n",
       "invited_by_user_id            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "users.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "data1 = pd.read_csv('takehome_user_engagement.csv',encoding ='latin-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "time_stamp    0\n",
       "user_id       0\n",
       "visited       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "data1.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#converting object to datetime\n",
    "data1['time_stamp'] = pd.to_datetime(data1['time_stamp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#aggregate for weekly count\n",
    "k=data1.groupby(['user_id', pd.Grouper(key='time_stamp', freq='W')])['visited'].count().reset_index().sort_values('user_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "k = k.groupby('user_id')['visited'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df = pd.DataFrame(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create new cokumn where visites are more than 3\n",
    "\n",
    "df['adopted'] = np.where(df.visited >= 3, 1,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['user_id', 'visited', 'adopted'], dtype='object')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df=pd.merge(users,df,left_on='object_id',right_on='user_id',how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['object_id', 'creation_time', 'name', 'email', 'creation_source',\n",
       "       'last_session_creation_time', 'opted_in_to_mailing_list',\n",
       "       'enabled_for_marketing_drip', 'org_id', 'invited_by_user_id', 'user_id',\n",
       "       'visited', 'adopted'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#merging of both dataframes\n",
    "final_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#dropping of user id column\n",
    "final_df=final_df.drop('user_id',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#filling na values to zero where customer have no activity\n",
    "final_df=final_df.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "object_id                     0\n",
       "creation_time                 0\n",
       "name                          0\n",
       "email                         0\n",
       "creation_source               0\n",
       "last_session_creation_time    0\n",
       "opted_in_to_mailing_list      0\n",
       "enabled_for_marketing_drip    0\n",
       "org_id                        0\n",
       "invited_by_user_id            0\n",
       "visited                       0\n",
       "adopted                       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking of dataframe for null values\n",
    "final_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1fb5ad57048>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,4))\n",
    "sns.countplot(x='creation_source', data=final_df, hue='adopted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ps783\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:1264: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(UserWarning(msg))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1fb60671b88>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "sns.set(style=\"whitegrid\")\n",
    "g = sns.PairGrid(data=final_df, x_vars=['opted_in_to_mailing_list'], y_vars='adopted', size=5)\n",
    "g.map(sns.pointplot, color=sns.xkcd_rgb[\"plum\"])\n",
    "g.set(ylim=(0, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ps783\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:1264: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(UserWarning(msg))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1fb606ec988>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(style=\"whitegrid\")\n",
    "g = sns.PairGrid(data=final_df, x_vars=['enabled_for_marketing_drip'], y_vars='adopted', size=5)\n",
    "g.map(sns.pointplot, color=sns.xkcd_rgb[\"plum\"])\n",
    "g.set(ylim=(0, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1fb607be4c8>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_df['creation_source'].value_counts().plot(kind='pie')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ps783\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:1264: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(UserWarning(msg))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1fb60822c48>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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ADCBIAUAwASCFAAAEwhSAABMIEgBADDBrkEaHh6ugIAAtW/fXgsXLrztchs2bFCbNm3sWQoAAHZht5uKxsbGasqUKVq2bJlcXV313HPPydfXV9WrV7dZ7vz585owYYK9ygAAwK7s1iKNiIhQs2bNVLJkSRUpUkT+/v5avXp1tuVGjBihN954w15lAABgV3YL0ri4OHl4eFinPT09FRsba7PM/PnzVadOHT322GP2KgMAALuyW9euxWKRg4ODddowDJvpQ4cOae3atZo3b55iYmLu6jWioqJM1wkAKJgaNWqU3yVIsmOQli9fXjt27LBOx8fHy9PT0zq9evVqxcfHq1u3bkpLS1NcXJx69Oihb7/9Ntev4e3tLTc3tzytGwCAO2G3rt0WLVpoy5YtSkhIUHJystauXSs/Pz/r/JCQEK1Zs0YrVqzQrFmz5OnpeUchCgDA/cBuQVquXDkNHjxYvXv3VufOnRUYGCgfHx/169dPkZGR9npZAADuKQfDMIz8LuJOpaSkKCoqiq5dAEC+48pGAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGACQQoAgAkEKQAAJhCkAACYQJACAGCCXYM0PDxcAQEBat++vRYuXJht/rp169SpUycFBwdr4MCBSkxMtGc5AADkObsFaWxsrKZMmaJvv/1Wy5cv1+LFi3XkyBHr/KSkJH344YeaNWuWVq5cqZo1a2r69On2KgcAALuwW5BGRESoWbNmKlmypIoUKSJ/f3+tXr3aOj8tLU0ffPCB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\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.PairGrid(data=final_df, x_vars=['creation_source'], y_vars='adopted', size=6)\n",
    "g.map(sns.pointplot, color=sns.xkcd_rgb[\"plum\"])\n",
    "g.set(ylim=(0, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df['email_domain'] = [x.split('@')[1] for x in final_df['email']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>object_id</th>\n",
       "      <th>creation_time</th>\n",
       "      <th>name</th>\n",
       "      <th>email</th>\n",
       "      <th>creation_source</th>\n",
       "      <th>last_session_creation_time</th>\n",
       "      <th>opted_in_to_mailing_list</th>\n",
       "      <th>enabled_for_marketing_drip</th>\n",
       "      <th>org_id</th>\n",
       "      <th>invited_by_user_id</th>\n",
       "      <th>visited</th>\n",
       "      <th>adopted</th>\n",
       "      <th>email_domain</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2014-04-22 03:53:30</td>\n",
       "      <td>Clausen August</td>\n",
       "      <td>AugustCClausen@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2014-04-22 03:53:30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>10803.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>yahoo.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2013-11-15 03:45:04</td>\n",
       "      <td>Poole Matthew</td>\n",
       "      <td>MatthewPoole@gustr.com</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>2014-03-31 03:45:04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>316.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>gustr.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2013-03-19 23:14:52</td>\n",
       "      <td>Bottrill Mitchell</td>\n",
       "      <td>MitchellBottrill@gustr.com</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>2013-03-19 23:14:52</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>1525.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>gustr.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2013-05-21 08:09:28</td>\n",
       "      <td>Clausen Nicklas</td>\n",
       "      <td>NicklasSClausen@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2013-05-22 08:09:28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5151.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>yahoo.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2013-01-17 10:14:20</td>\n",
       "      <td>Raw Grace</td>\n",
       "      <td>GraceRaw@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2013-01-22 10:14:20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>193</td>\n",
       "      <td>5240.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>yahoo.com</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   object_id       creation_time               name  \\\n",
       "0          1 2014-04-22 03:53:30     Clausen August   \n",
       "1          2 2013-11-15 03:45:04      Poole Matthew   \n",
       "2          3 2013-03-19 23:14:52  Bottrill Mitchell   \n",
       "3          4 2013-05-21 08:09:28    Clausen Nicklas   \n",
       "4          5 2013-01-17 10:14:20          Raw Grace   \n",
       "\n",
       "                        email creation_source last_session_creation_time  \\\n",
       "0    AugustCClausen@yahoo.com    GUEST_INVITE        2014-04-22 03:53:30   \n",
       "1      MatthewPoole@gustr.com      ORG_INVITE        2014-03-31 03:45:04   \n",
       "2  MitchellBottrill@gustr.com      ORG_INVITE        2013-03-19 23:14:52   \n",
       "3   NicklasSClausen@yahoo.com    GUEST_INVITE        2013-05-22 08:09:28   \n",
       "4          GraceRaw@yahoo.com    GUEST_INVITE        2013-01-22 10:14:20   \n",
       "\n",
       "   opted_in_to_mailing_list  enabled_for_marketing_drip  org_id  \\\n",
       "0                         1                           0      11   \n",
       "1                         0                           0       1   \n",
       "2                         0                           0      94   \n",
       "3                         0                           0       1   \n",
       "4                         0                           0     193   \n",
       "\n",
       "   invited_by_user_id  visited  adopted email_domain  \n",
       "0             10803.0      1.0      0.0    yahoo.com  \n",
       "1               316.0      3.0      1.0    gustr.com  \n",
       "2              1525.0      1.0      0.0    gustr.com  \n",
       "3              5151.0      1.0      0.0    yahoo.com  \n",
       "4              5240.0      1.0      0.0    yahoo.com  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1184"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(final_df.email_domain.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gmail.com         3562\n",
       "yahoo.com         2447\n",
       "jourrapide.com    1259\n",
       "cuvox.de          1202\n",
       "gustr.com         1179\n",
       "hotmail.com       1165\n",
       "xybhi.com            2\n",
       "mumdc.com            2\n",
       "rerwl.com            2\n",
       "oqpze.com            2\n",
       "xvnbr.com            2\n",
       "luque.com            2\n",
       "dqwln.com            2\n",
       "qgjbc.com            2\n",
       "qrkbx.com            1\n",
       "Name: email_domain, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df['email_domain'].value_counts().head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "major_domains = ['gmail.com', 'yahoo.com', 'jourrapide.com', 'cuvox.de', 'gustr.com', 'hotmail.com']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_email=final_df.loc[final_df['email_domain'].isin(major_domains)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ps783\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:1264: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(UserWarning(msg))\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1fb60b3bb48>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.PairGrid(data=df_email, x_vars=['email_domain'], y_vars='adopted', size=6)\n",
    "g.map(sns.pointplot, color=sns.xkcd_rgb[\"plum\"])\n",
    "g.set(ylim=(0, 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is observed that email with hotmail domain is mostly used by adopted and yahoo os least used by adopted user."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing,svm\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn import model_selection,metrics\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split,KFold,cross_val_score,cross_val_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>object_id</th>\n",
       "      <th>creation_time</th>\n",
       "      <th>name</th>\n",
       "      <th>email</th>\n",
       "      <th>creation_source</th>\n",
       "      <th>last_session_creation_time</th>\n",
       "      <th>opted_in_to_mailing_list</th>\n",
       "      <th>enabled_for_marketing_drip</th>\n",
       "      <th>org_id</th>\n",
       "      <th>invited_by_user_id</th>\n",
       "      <th>visited</th>\n",
       "      <th>adopted</th>\n",
       "      <th>email_domain</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2014-04-22 03:53:30</td>\n",
       "      <td>Clausen August</td>\n",
       "      <td>AugustCClausen@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2014-04-22 03:53:30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>10803.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>yahoo.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2013-11-15 03:45:04</td>\n",
       "      <td>Poole Matthew</td>\n",
       "      <td>MatthewPoole@gustr.com</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>2014-03-31 03:45:04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>316.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>gustr.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2013-03-19 23:14:52</td>\n",
       "      <td>Bottrill Mitchell</td>\n",
       "      <td>MitchellBottrill@gustr.com</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>2013-03-19 23:14:52</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>1525.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>gustr.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2013-05-21 08:09:28</td>\n",
       "      <td>Clausen Nicklas</td>\n",
       "      <td>NicklasSClausen@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2013-05-22 08:09:28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5151.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>yahoo.com</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2013-01-17 10:14:20</td>\n",
       "      <td>Raw Grace</td>\n",
       "      <td>GraceRaw@yahoo.com</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2013-01-22 10:14:20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>193</td>\n",
       "      <td>5240.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>yahoo.com</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   object_id       creation_time               name  \\\n",
       "0          1 2014-04-22 03:53:30     Clausen August   \n",
       "1          2 2013-11-15 03:45:04      Poole Matthew   \n",
       "2          3 2013-03-19 23:14:52  Bottrill Mitchell   \n",
       "3          4 2013-05-21 08:09:28    Clausen Nicklas   \n",
       "4          5 2013-01-17 10:14:20          Raw Grace   \n",
       "\n",
       "                        email creation_source last_session_creation_time  \\\n",
       "0    AugustCClausen@yahoo.com    GUEST_INVITE        2014-04-22 03:53:30   \n",
       "1      MatthewPoole@gustr.com      ORG_INVITE        2014-03-31 03:45:04   \n",
       "2  MitchellBottrill@gustr.com      ORG_INVITE        2013-03-19 23:14:52   \n",
       "3   NicklasSClausen@yahoo.com    GUEST_INVITE        2013-05-22 08:09:28   \n",
       "4          GraceRaw@yahoo.com    GUEST_INVITE        2013-01-22 10:14:20   \n",
       "\n",
       "   opted_in_to_mailing_list  enabled_for_marketing_drip  org_id  \\\n",
       "0                         1                           0      11   \n",
       "1                         0                           0       1   \n",
       "2                         0                           0      94   \n",
       "3                         0                           0       1   \n",
       "4                         0                           0     193   \n",
       "\n",
       "   invited_by_user_id  visited  adopted email_domain  \n",
       "0             10803.0      1.0      0.0    yahoo.com  \n",
       "1               316.0      3.0      1.0    gustr.com  \n",
       "2              1525.0      1.0      0.0    gustr.com  \n",
       "3              5151.0      1.0      0.0    yahoo.com  \n",
       "4              5240.0      1.0      0.0    yahoo.com  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare date by dropping columns we dont need.\n",
    "#\n",
    "model_df = pd.DataFrame(final_df.drop(['name','email','invited_by_user_id','object_id','email_domain','visited'], axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>creation_time</th>\n",
       "      <th>creation_source</th>\n",
       "      <th>last_session_creation_time</th>\n",
       "      <th>opted_in_to_mailing_list</th>\n",
       "      <th>enabled_for_marketing_drip</th>\n",
       "      <th>org_id</th>\n",
       "      <th>adopted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2014-04-22 03:53:30</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2014-04-22 03:53:30</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2013-11-15 03:45:04</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>2014-03-31 03:45:04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2013-03-19 23:14:52</td>\n",
       "      <td>ORG_INVITE</td>\n",
       "      <td>2013-03-19 23:14:52</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2013-05-21 08:09:28</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2013-05-22 08:09:28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2013-01-17 10:14:20</td>\n",
       "      <td>GUEST_INVITE</td>\n",
       "      <td>2013-01-22 10:14:20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>193</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        creation_time creation_source last_session_creation_time  \\\n",
       "0 2014-04-22 03:53:30    GUEST_INVITE        2014-04-22 03:53:30   \n",
       "1 2013-11-15 03:45:04      ORG_INVITE        2014-03-31 03:45:04   \n",
       "2 2013-03-19 23:14:52      ORG_INVITE        2013-03-19 23:14:52   \n",
       "3 2013-05-21 08:09:28    GUEST_INVITE        2013-05-22 08:09:28   \n",
       "4 2013-01-17 10:14:20    GUEST_INVITE        2013-01-22 10:14:20   \n",
       "\n",
       "   opted_in_to_mailing_list  enabled_for_marketing_drip  org_id  adopted  \n",
       "0                         1                           0      11      0.0  \n",
       "1                         0                           0       1      1.0  \n",
       "2                         0                           0      94      0.0  \n",
       "3                         0                           0       1      0.0  \n",
       "4                         0                           0     193      0.0  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "model_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_df.rename(columns={'creation_source':'cs'}, inplace=True)\n",
    "model_df = pd.get_dummies(model_df, columns=['cs'], drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "for col in ['last_session_creation_time','creation_time']:\n",
    "    model_df[\"month_\" + col] = model_df[col].dt.month\n",
    "    model_df[\"day_\" + col] = model_df[col].dt.day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>opted_in_to_mailing_list</th>\n",
       "      <th>enabled_for_marketing_drip</th>\n",
       "      <th>org_id</th>\n",
       "      <th>adopted</th>\n",
       "      <th>cs_ORG_INVITE</th>\n",
       "      <th>cs_PERSONAL_PROJECTS</th>\n",
       "      <th>cs_SIGNUP</th>\n",
       "      <th>cs_SIGNUP_GOOGLE_AUTH</th>\n",
       "      <th>month_last_session_creation_time</th>\n",
       "      <th>day_last_session_creation_time</th>\n",
       "      <th>month_creation_time</th>\n",
       "      <th>day_creation_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>22</td>\n",
       "      <td>4</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "      <td>5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>193</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   opted_in_to_mailing_list  enabled_for_marketing_drip  org_id  adopted  \\\n",
       "0                         1                           0      11      0.0   \n",
       "1                         0                           0       1      1.0   \n",
       "2                         0                           0      94      0.0   \n",
       "3                         0                           0       1      0.0   \n",
       "4                         0                           0     193      0.0   \n",
       "\n",
       "   cs_ORG_INVITE  cs_PERSONAL_PROJECTS  cs_SIGNUP  cs_SIGNUP_GOOGLE_AUTH  \\\n",
       "0              0                     0          0                      0   \n",
       "1              1                     0          0                      0   \n",
       "2              1                     0          0                      0   \n",
       "3              0                     0          0                      0   \n",
       "4              0                     0          0                      0   \n",
       "\n",
       "   month_last_session_creation_time  day_last_session_creation_time  \\\n",
       "0                                 4                              22   \n",
       "1                                 3                              31   \n",
       "2                                 3                              19   \n",
       "3                                 5                              22   \n",
       "4                                 1                              22   \n",
       "\n",
       "   month_creation_time  day_creation_time  \n",
       "0                    4                 22  \n",
       "1                   11                 15  \n",
       "2                    3                 19  \n",
       "3                    5                 21  \n",
       "4                    1                 17  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#\n",
    "# Drop the creation and last login columns.\n",
    "#\n",
    "model_df.drop('creation_time',  axis=1, inplace=True)\n",
    "model_df.drop('last_session_creation_time',  axis=1, inplace=True)\n",
    "\n",
    "#\n",
    "# Print the head.\n",
    "#\n",
    "model_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "target = model_df['adopted']\n",
    "model_df.drop('adopted',  axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(model_df, target, test_size=0.2, random_state=42, stratify=target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Iter       Train Loss   Remaining Time \n",
      "         1           0.6477            3.17s\n",
      "         2           0.5967            2.74s\n",
      "         3           0.5615            3.10s\n",
      "         4           0.5290            2.69s\n",
      "         5           0.5049            2.38s\n",
      "         6           0.4717            2.23s\n",
      "         7           0.4455            2.10s\n",
      "         8           0.4348            2.17s\n",
      "         9           0.4161            2.11s\n",
      "        10           0.4011            2.24s\n",
      "        20           0.3092            1.75s\n",
      "        30           0.2576            1.44s\n",
      "        40           0.2388            1.18s\n",
      "        50           0.2238            0.95s\n",
      "        60           0.2136            0.76s\n",
      "        70           0.2024            0.58s\n",
      "        80           0.1946            0.53s\n",
      "        90           0.1869            0.28s\n",
      "       100           0.1770            0.00s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9641666666666666"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier = GradientBoostingClassifier(verbose=True)\n",
    "classifier.fit(X_train, y_train)\n",
    "classifier.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2084,   27],\n",
       "       [  59,  230]], dtype=int64)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test, classifier.predict(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11,)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier.feature_importances_.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "features = pd.Series(classifier.feature_importances_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1fb60c1a4c8>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure(figsize=(6,10))\n",
    "sns.barplot(y=X_train.columns, x=classifier.feature_importances_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                  importance\n",
      "month_creation_time                 0.438271\n",
      "month_last_session_creation_time    0.286833\n",
      "day_creation_time                   0.166251\n",
      "day_last_session_creation_time      0.104395\n",
      "org_id                              0.003125\n",
      "cs_SIGNUP_GOOGLE_AUTH               0.000487\n",
      "enabled_for_marketing_drip          0.000365\n",
      "cs_PERSONAL_PROJECTS                0.000210\n",
      "opted_in_to_mailing_list            0.000063\n",
      "cs_ORG_INVITE                       0.000000\n",
      "cs_SIGNUP                           0.000000\n"
     ]
    }
   ],
   "source": [
    "print(pd.DataFrame(classifier.feature_importances_, index = X_train.columns,\n",
    "                   columns=['importance']).sort_values('importance', ascending=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can say that creation time and last session creation time plays major role in being customer as 'Adopted'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
